worker_processes 1;

events {
    worker_connections 65536;
}

http {
    # Rate limiting zone - moved to http block
    limit_req_zone $binary_remote_addr zone=limit_req_zone:10m rate=20r/s;
    
    # Include MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Upstream backend servers
    upstream backend_servers {
        server backend:8080;
    }

    server {
        listen 80;
        
        # Custom error pages for all HTTP error codes
        error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 @error_handler;
        
        # Error handler location that returns JSON
        location @error_handler {
            internal;
            add_header Content-Type application/json always;
            
            # Set default error message based on status code
            set $error_message "Unknown error";
            
            # Common HTTP status codes and their messages
            if ($status = 400) { set $error_message "Bad Request"; }
            if ($status = 401) { set $error_message "Unauthorized"; }
            if ($status = 403) { set $error_message "Forbidden"; }
            if ($status = 404) { set $error_message "Not Found"; }
            if ($status = 405) { set $error_message "Method Not Allowed"; }
            if ($status = 408) { set $error_message "Request Timeout"; }
            if ($status = 409) { set $error_message "Conflict"; }
            if ($status = 410) { set $error_message "Gone"; }
            if ($status = 413) { set $error_message "Request Entity Too Large"; }
            if ($status = 414) { set $error_message "Request-URI Too Long"; }
            if ($status = 415) { set $error_message "Unsupported Media Type"; }
            if ($status = 429) { set $error_message "Too Many Requests"; }
            if ($status = 500) { set $error_message "Internal Server Error"; }
            if ($status = 501) { set $error_message "Not Implemented"; }
            if ($status = 502) { set $error_message "Bad Gateway"; }
            if ($status = 503) { set $error_message "Service Unavailable"; }
            if ($status = 504) { set $error_message "Gateway Timeout"; }
            if ($status = 505) { set $error_message "HTTP Version Not Supported"; }
            
            # Return JSON error response
            return $status '{"code": $status, "message": "$error_message"}';
        }
        
        # Rate limiting error handler (specifically for 429 errors)
        location @rate_limit_error {
            internal;
            add_header Content-Type application/json always;
            return 429 '{"code": 429, "message": "Too Many Requests"}';
        }

        location / {
            # Apply rate limiting with custom error handling
            limit_req zone=limit_req_zone burst=5 nodelay;
            limit_req_status 429;
            
            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass_header Set-Cookie;
            proxy_http_version 1.1;
            
            # Connection settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Pass to backend
            proxy_pass http://backend_servers;
        }
    }
}